// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WebTemplate.Models;

#nullable disable

namespace WebTemplate.Migrations
{
    [DbContext(typeof(IspitContext))]
    partial class IspitContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Models.Biblioteka", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Adresa")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmailAdresa")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Ime")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Biblioteka");
                });

            modelBuilder.Entity("Models.Biblioteka_Knjiga", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int?>("BibliotekaID")
                        .HasColumnType("int");

                    b.Property<int>("BrojKnjige")
                        .HasColumnType("int");

                    b.Property<int?>("KnjigaID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("BibliotekaID");

                    b.HasIndex("KnjigaID");

                    b.ToTable("Biblioteka_Knjiga");
                });

            modelBuilder.Entity("Models.Izdavanje", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int?>("BibliotekaID")
                        .HasColumnType("int");

                    b.Property<DateTime>("DatumIzdavanja")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DatumVracanja")
                        .HasColumnType("datetime2");

                    b.Property<int?>("KnjigaID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("BibliotekaID");

                    b.HasIndex("KnjigaID");

                    b.ToTable("Izdavanje");
                });

            modelBuilder.Entity("Models.Knjiga", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Autor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("GodinaIzdavanja")
                        .HasColumnType("int");

                    b.Property<string>("Naziv")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NazivIzdavaca")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Knjiga");
                });

            modelBuilder.Entity("Models.Biblioteka_Knjiga", b =>
                {
                    b.HasOne("Models.Biblioteka", "Biblioteka")
                        .WithMany("Biblioteka_Knjigas")
                        .HasForeignKey("BibliotekaID");

                    b.HasOne("Models.Knjiga", "Knjiga")
                        .WithMany("Biblioteka_Knjigas")
                        .HasForeignKey("KnjigaID");

                    b.Navigation("Biblioteka");

                    b.Navigation("Knjiga");
                });

            modelBuilder.Entity("Models.Izdavanje", b =>
                {
                    b.HasOne("Models.Biblioteka", "Biblioteka")
                        .WithMany("Izdavanja")
                        .HasForeignKey("BibliotekaID");

                    b.HasOne("Models.Knjiga", "Knjiga")
                        .WithMany("Izdavanja")
                        .HasForeignKey("KnjigaID");

                    b.Navigation("Biblioteka");

                    b.Navigation("Knjiga");
                });

            modelBuilder.Entity("Models.Biblioteka", b =>
                {
                    b.Navigation("Biblioteka_Knjigas");

                    b.Navigation("Izdavanja");
                });

            modelBuilder.Entity("Models.Knjiga", b =>
                {
                    b.Navigation("Biblioteka_Knjigas");

                    b.Navigation("Izdavanja");
                });
#pragma warning restore 612, 618
        }
    }
}
